package Combat;

import java.awt.*;
import javax.swing.*;
import javax.swing.border.*;

class RussiaBox eable{
   

class GameCanvas extends  JPanel{
    private  RussiaBox[][]boxes;
    private int rows=20,cols=12;
    private static GameCanvas canvas=null;
    private  int boxWidth,boxHeight;
    private Color blockColor=Color.RED,bgColor=new Color(0,204,204);
    private  EtchedBorder border=new EtchedBorder(EtchedBorder.RAISED,Color.WHITE,new Color(148,145,140));
    private GameCanvas(){
        boxes=new RussiaBox[rows][cols];
        for(int i=0;i<boxes.length;i++){
            for(int j=0;j<boxes[i].length;j++)
                boxes[i][j]=new RussiaBox(false);
        }
        setBorder(border);
    }
    public static GameCanvas getCanvasInstance(){
        if(canvas==null)
            canvas=new GameCanvas();
        return canvas;
    }
    public void setBgColor(Color bgColor){
        this.bgColor=bgColor;
    }

    public void setBlockColor(Color blockColor) {
        this.blockColor = blockColor;
    }

    public Color getBlockColor() {
        return blockColor;
    }

    public void setRows(int rows) {
        this.rows = rows;
    }

    public int getRows() {
        return rows;
    }

    public void setCols(int cols) {
        this.cols = cols;
    }

    public int getCols() {
        return cols;
    }

    public RussiaBox getBoxes(int row, int col) {
        if(row>=0&&row<rows&&col>=0&&col<cols)
        return boxes[row][col];
        else
            return null;
    }

    public void paintComponent(Graphics g){
        super.paintComponent(g);

        fanning();
        for(int i=0;i<boxes.length;i++) {
            for (int j = 0; j < boxes[i].length; j++) {
                Color color = boxes[i][j].isColorBox() ? blockColor : bgColor;
                g.setColor(color);
                g.fill3DRect(j * boxWidth, i * boxHeight, boxWidth, boxHeight, true);
            }
        }
    }
    public void removeLine(int row){
                for(int i=row;i>0;i--)
                for(int j=0;j<cols;j++){
                    boxes[i][j]=(RussiaBox)boxes[i-1][j].clone();
                }

    }
    public void reset(){
            for(int i=0;i<boxes.length;i++)
            for(int j=0;j<boxes[i].length;j++){
                boxes[i][j].setColor(false);
            }
            repaint();
    }
    public void fanning(){
        boxWidth=getSize().width/cols;
        boxHeight=getSize().height/rows;
    }
}


class RussiaBlock extends  Thread{
    private int style,y,x,level;
    private boolean moving,pausing;
    private RussiaBox boxes[][];
    private GameCanvas canvas;

    public final static int ROWS=4;
    public final static int COLS=4;
    public final static int BLOCK_KIND_NUMBER=7;
    public final static int BLOCK_STATUS_NUMBER=4;
    public final static int BETWEEN_LEVELS_TIME=50;
    public final static int LEVEL_FLATNESS_GENE=3;

    public final static int[][]  STYLES={
            {0x0f00,0x4444,0x0f00,0x4444},
            {0x04e0,0x0464,0x00e4,0x04c4},
            {0x4620,0x6c00,0x4620,0x6c00},
            {0x2640,0xc600,0x2640,0xc600},
            {0x6220,0x1700,0x2230,0x0740},
            {0x6440,0x0e20,0x44c0,0x8e00},
            {0x0660,0x0660,0x0660,0x0660},
    };


    public RussiaBlock(int y,int x,int level,int style){
        this.y=y;
        this.x=x;
        this.level=level;
        moving=true;
        pausing=true;
        this.style=style;

        canvas=GameCanvas.getCanvasInstance();


        boxes =new RussiaBox[ROWS][COLS];
        int key=0x8000;

            for(int i=0;i<boxes.length;i++)
            for (int j = 0; j < boxes[i].length; j++){
                boolean isColor=((style&key)!=0);
                boxes[i][j]=new RussiaBox(isColor);
                key>>=1;
            }
            display();
        }
public void run(){
        while(moving){
            try{
               sleep(BETWEEN_LEVELS_TIME*(RussiaBlocksGame.MAX_LEVEL-level+LEVEL_FLATNESS_GENE));
               if(!pausing)
                   moving=(moveTO(y+1,x)&&moving);
            }
            catch (InterruptedException e){
                    e.printStackTrace();
            }
        }
}
public void pauseMove(){
    pausing=true;
}

public void resumeMove(){
    pausing=false;
}
public void stopMove(){
    moving=false;
}
public void moveLeft(){
     moveTo(y,x-1);

}
public void moveRight(){
        moveTo(y,x+1);
    }
    public void moveDown(){
    if(moveTo(y+1,x))
        return true;
    else
        return false;
    }
}
public class elsBlock {
}
